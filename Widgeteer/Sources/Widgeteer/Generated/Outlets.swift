// üçû bin/widgeteer/bindings_generator/bindings_generator.dart:127
// === GENERATED BY `widgeteer bindings generate` === DO NOT EDIT ===
// === Follow the breadcrumbs to find what code generated what you're reading ===
import DartApiDl

// MARK: NewText
// Outlet emitted by 'Text' binding (Instance of 'WidgetBinding')
// üçû bin/widgeteer/bindings_generator/models/outlet.dart:86
public typealias _NewText_CFunctionPointer = @convention(c) (_ key: UnsafePointer<CChar>?, _ data: UnsafePointer<CChar>?) -> Dart_Handle
public typealias _NewText = (_ key: UnsafePointer<CChar>?, _ data: UnsafePointer<CChar>?) -> Dart_Handle

public var Flutter_NewText: _NewText = { (_, _) in fatalError("'NewText' called before it was registered") }

@_cdecl("register_new_text")
public func _registerNewText(_ outlet: _NewText_CFunctionPointer) {
    assertIsOnFlutterThread()
    trace("Registering 'NewText'")
    Flutter_NewText = { (p0, p1) in assertIsOnFlutterThread(); return outlet(p0, p1) }
}
// MARK: RunApp
// Outlet emitted by 'RunApp' binding (Instance of 'FunctionBinding')
// üçû bin/widgeteer/bindings_generator/models/outlet.dart:86
public typealias _RunApp_CFunctionPointer = @convention(c) (_ app: Dart_Handle) -> Void
public typealias _RunApp = (_ app: Dart_Handle) -> Void

public var Flutter_RunApp: _RunApp = { (_) in fatalError("'RunApp' called before it was registered") }

@_cdecl("register_run_app")
public func _registerRunApp(_ outlet: _RunApp_CFunctionPointer) {
    assertIsOnFlutterThread()
    trace("Registering 'RunApp'")
    Flutter_RunApp = { (p0) in assertIsOnFlutterThread(); return outlet(p0) }
}
// MARK: NewDirectionality
// Outlet emitted by 'Directionality' binding (Instance of 'WidgetBinding')
// üçû bin/widgeteer/bindings_generator/models/outlet.dart:86
public typealias _NewDirectionality_CFunctionPointer = @convention(c) (_ key: UnsafePointer<CChar>?, _ textDirection: Int, _ child: Dart_Handle) -> Dart_Handle
public typealias _NewDirectionality = (_ key: UnsafePointer<CChar>?, _ textDirection: Int, _ child: Dart_Handle) -> Dart_Handle

public var Flutter_NewDirectionality: _NewDirectionality = { (_, _, _) in fatalError("'NewDirectionality' called before it was registered") }

@_cdecl("register_new_directionality")
public func _registerNewDirectionality(_ outlet: _NewDirectionality_CFunctionPointer) {
    assertIsOnFlutterThread()
    trace("Registering 'NewDirectionality'")
    Flutter_NewDirectionality = { (p0, p1, p2) in assertIsOnFlutterThread(); return outlet(p0, p1, p2) }
}
// MARK: NewStatelessUserWidget
// Outlet emitted by 'StatelessUserWidget' binding (Instance of 'WidgetBinding')
// üçû bin/widgeteer/bindings_generator/models/outlet.dart:86
public typealias _NewStatelessUserWidget_CFunctionPointer = @convention(c) (_ key: UnsafePointer<CChar>?, _ proxy: UnsafeRawPointer, _ swiftWidgetName: UnsafePointer<CChar>?) -> Dart_Handle
public typealias _NewStatelessUserWidget = (_ key: UnsafePointer<CChar>?, _ proxy: UnsafeRawPointer, _ swiftWidgetName: UnsafePointer<CChar>?) -> Dart_Handle

public var Flutter_NewStatelessUserWidget: _NewStatelessUserWidget = { (_, _, _) in fatalError("'NewStatelessUserWidget' called before it was registered") }

@_cdecl("register_new_stateless_user_widget")
public func _registerNewStatelessUserWidget(_ outlet: _NewStatelessUserWidget_CFunctionPointer) {
    assertIsOnFlutterThread()
    trace("Registering 'NewStatelessUserWidget'")
    Flutter_NewStatelessUserWidget = { (p0, p1, p2) in assertIsOnFlutterThread(); return outlet(p0, p1, p2) }
}