/*
   Copyright 2023 natinusala

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

import 'package:path/path.dart' as p;
import 'bindings/any_widget.dart';
import 'bindings/bridging.dart';
import 'bindings/callback.dart';
import 'bindings/enum.dart';
import 'bindings/function.dart';
import 'bindings/int.dart';
import 'bindings/object.dart';
import 'bindings/persistent_object.dart';
import 'bindings/string.dart';
import 'bindings/void.dart';
import 'bindings/widget.dart';
import 'bindings/widget_key.dart';
import 'bindings_generator/native_libraries/lib_app.dart';
import 'bindings_generator/toml.dart';
import 'building/device.dart';
import 'building/devices/android.dart';
import 'building/devices/linux.dart';
import 'bindings_generator/native_libraries/lib_widgeteer.dart';

final builtinBindings = [
  StringBinding(),
  WidgetKeyBinding(),
  ObjectBinding(),
  VoidBinding(),
  AnyWidgetBinding(),
  IntBinding(),
  BridgingBinding(),
];

final nativeLibraries = [
  LibWidgeteer(),
  LibApp(),
];

final tomlTypes = [
  BindingType("widget", WidgetBinding.fromTOML),
  BindingType("function", FunctionBinding.fromTOML),
  BindingType("enum", EnumBinding.fromTOML),
  BindingType("class", PersistentObjectBinding.fromTOML),
  BindingType("callback", CallbackBinding.fromTOML),
];

const generatedHeader =
    "// === GENERATED BY `widgeteer bindings generate` === DO NOT EDIT ===\n// === Follow the breadcrumbs to find what code generated what you're reading ===";

final dartLibRoot = p.join("lib");
final generatedDartRoot = p.join("lib", "generated");
final generatedSwiftRoot =
    p.join("Widgeteer", "Sources", "Widgeteer", "Generated");
const includesRoot = "Include";
final generatedIncludesRoot = p.join(includesRoot, "generated");

/// Attempt to create a [Device] handle from the given settings.
/// Platform string should follow the `platform-arch` pattern.
Device createDevice(String id, String name, String platform, String version) {
  // Linux
  if (platform.startsWith("linux")) {
    // Assume we are not cross-compiling and ignore arch suffix
    return LinuxDevice(
        id: id, name: name, platform: platform, version: version);
  }

  // Android
  if (platform.startsWith("android")) {
    return AndroidDevice(
        id: id, name: name, platform: platform, version: version);
  }

  // Unsupported / unknown device
  return UnsupportedDevice(
      id: id, name: name, platform: platform, version: version);
}
