// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Widgeteer Runtime
class LibWidgeteer {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibWidgeteer(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibWidgeteer.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void register_new_text(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Handle Function(
                    ffi.Pointer<ffi.Char> key, ffi.Pointer<ffi.Char> data)>>
        outlet,
  ) {
    return _register_new_text(
      outlet,
    );
  }

  late final _register_new_textPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Handle Function(ffi.Pointer<ffi.Char> key,
                          ffi.Pointer<ffi.Char> data)>>)>>('register_new_text');
  late final _register_new_text = _register_new_textPtr.asFunction<
      void Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Handle Function(ffi.Pointer<ffi.Char> key,
                      ffi.Pointer<ffi.Char> data)>>)>();

  void init(
    ffi.Pointer<ffi.Void> data,
  ) {
    return _init(
      data,
    );
  }

  late final _initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'widgeteer_init');
  late final _init =
      _initPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();
}
