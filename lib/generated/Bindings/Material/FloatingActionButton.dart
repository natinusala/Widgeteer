// 🍞 bin/widgeteer/bindings_generator/bindings_generator.dart:81
// === GENERATED BY `widgeteer bindings generate` === DO NOT EDIT ===
// === Follow the breadcrumbs to find what code generated what you're reading ===
// 🍞 bin/widgeteer/bindings_generator/bindings_generator.dart:45
import 'package:flutter/widgets.dart';
import 'package:widgeteer/dylib.dart';
import 'package:flutter/material.dart';
import 'package:widgeteer/generated/Bindings/Callback/VoidCallback.dart';
// 🍞 bin/widgeteer/bindings/widget.dart:148
// 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:59
import 'package:flutter/material.dart';
import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:widgeteer/generated/lib_widgeteer.dart';
import 'package:widgeteer/swift.dart';
import 'package:flutter/foundation.dart';
// 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:95
Object newFloatingActionButtonImpl(Pointer<Char> key, Pointer<Void> onPressed, optional_value tooltip, Object child) {
    // 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:81
    // 🍞 bin/widgeteer/bindings_generator/models/parameter.dart:143
    // 🍞 bin/widgeteer/bindings/widget_key.dart:42
    final keyString = key.cast<Utf8>().toDartString();
    final keyValue = ValueKey(keyString);
    // 🍞 bin/widgeteer/bindings/callback.dart:256
    late VoidCallback? onPressedValue;
    if (onPressed == nullptr) {
        onPressedValue = null;
    } else {
        final onPressedProxy = VoidCallbackProxy(onPressed);
        onPressedValue = () { return onPressedProxy.call(); };
    }
    // 🍞 bin/widgeteer/bindings/string.dart:90
    late final String? tooltipValue;
    if (libWidgeteer.optional_value_is_set(tooltip)) {
        tooltipValue = libWidgeteer.optional_value_get_string(tooltip).cast<Utf8>().toDartString();
    } else {
        tooltipValue = null;
    }
    // 🍞 bin/widgeteer/bindings/widget.dart:692
    final childValue = child as Widget;
    
    return FloatingActionButton(key: keyValue, onPressed: onPressedValue, tooltip: tooltipValue, child: childValue);
}