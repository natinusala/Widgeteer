// 🍞 bin/widgeteer/bindings_generator/bindings_generator.dart:81
// === GENERATED BY `widgeteer bindings generate` === DO NOT EDIT ===
// === Follow the breadcrumbs to find what code generated what you're reading ===
// 🍞 bin/widgeteer/bindings_generator/bindings_generator.dart:45
import 'package:flutter/widgets.dart';
import 'package:widgeteer/dylib.dart';
import 'package:flutter/material.dart';
import 'package:widgeteer/generated/Bindings/Callback/VoidCallback.dart';
// 🍞 bin/widgeteer/bindings/widget.dart:148
// 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:59
import 'package:flutter/widgets.dart';
import 'dart:ffi';
import 'package:ffi/ffi.dart';
import 'package:widgeteer/generated/lib_widgeteer.dart';
import 'package:widgeteer/swift.dart';
import 'package:flutter/foundation.dart';
// 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:91
Object newIconImpl(Pointer<Char> key, int icon, optional_value size) {
    // 🍞 bin/widgeteer/bindings_generator/models/dart_function.dart:81
    // 🍞 bin/widgeteer/bindings_generator/models/parameter.dart:143
    // 🍞 bin/widgeteer/bindings/widget_key.dart:43
    final keyString = key.cast<Utf8>().toDartString();
    final keyValue = ValueKey(keyString);
    // 🍞 bin/widgeteer/bindings/enum.dart:143
    late final IconData iconValue;
    switch (icon) {
        case 0: iconValue = Icons.add; break;
        case 1: iconValue = Icons.supervisor_account; break;
        case 2: iconValue = Icons.supervised_user_circle; break;
        default: throw "Received invalid index '$icon' for value of enum 'IconData'";
    }
    // 🍞 bin/widgeteer/bindings/double.dart:59
    late final double? sizeValue;
    if (libWidgeteer.optional_value_is_set(size)) {
        sizeValue = libWidgeteer.optional_value_get_double(size);
    } else {
        sizeValue = null;
    }
    
    return Icon(key: keyValue, iconValue, size: sizeValue);
}